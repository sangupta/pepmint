<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Feb 1, 2012 10:44:19 AM                                                        

     Pepmint    
     JAVA wrapper over Pygments syntax highlighting library of Python.
                   
     @author sangupta                                                                
     ====================================================================== -->
<project name="Pepmint" default="default" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    
	<description>
		Pepmint - JAVA wrapper over Pygments syntax highlighting library of Python.
    </description>
	
	<property file="build.properties" />
	
	<tstamp>
		<format property="BUILD.TIME" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>
	
	<!-- The default classpath -->
	<path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <target name="default" depends="checkPygmentsJython,createPygmentsJython,compile,generateDocs,package,cleanStage" description="description">
        
    </target>
	
	<target name="compile">
		<!-- clean stage folder -->
		<delete dir="${stage.folder}" />
		<mkdir dir="${stage.folder}" />

		<!-- compile sources -->
		<javac srcdir="${src.folder}" destdir="${stage.folder}" debug="false" optimize="true" classpathref="classpath" />

		<!-- copy all resources to stage from sources folder -->
		<copy todir="${stage.folder}">
			<fileset dir="${src.folder}" excludes="**/*.java" />
		</copy>
	</target>
	
	<target name="generateDocs" description="Generates the Javadocs for the project">
		<delete dir="${docs.folder}" />
		<javadoc destdir="${docs.folder}" sourcepath="${src.folder}" version="true" windowtitle="${project.name}">
			<bottom><![CDATA[
				<i>Copyright &copy; 2012 Sandeep Gupta. All Rights Reserved.</i>
			]]></bottom>
		</javadoc>
	</target>
	
	<target name="package">
		<!-- create the release folder if not already present -->
		<mkdir dir="${releases.folder}" />
			
		<!-- package -->
		<jar destfile="${releases.folder}/${project.name}-${version.number}.jar">
			<fileset dir="${stage.folder}" />
			<manifest>
				<attribute name="Product-Name" value="${project.name}" />
				<attribute name="Product-Version" value="${version.number}" />
				<attribute name="Product-Description" value="${project.description}" />
				<attribute name="Build-Date" value="${BUILD.TIME}" />
				<attribute name="Project-Home" value="${project.home}" />
			</manifest>
		</jar>

		<pathconvert property="mf.classpath" pathsep=" ">
	        <path refid="classpath"/>
	        <mapper>
                <chainedmapper>
                    <flattenmapper/>
                    <globmapper from="*.jar" to="*.jar"/>
                </chainedmapper>
	        </mapper>
		</pathconvert>

		<!-- package an all-inclusive jar too -->
		<jar destfile="${releases.folder}/${project.name}-nodeps-${version.number}.jar" filesetmanifest="skip">
            <manifest>
				<attribute name="Product-Name" value="${project.name}" />
				<attribute name="Product-Version" value="${version.number}" />
				<attribute name="Product-Description" value="${project.description}" />
				<attribute name="Build-Date" value="${BUILD.TIME}" />
				<attribute name="Project-Home" value="${project.home}" />
            </manifest>
			<fileset dir="${stage.folder}" />
            <zipgroupfileset dir="${lib.dir}" includes="**/*.jar" />
        </jar>
		
		<!-- create all staging -->
		<delete dir="${stage.folder}/all" />
		<mkdir dir="${stage.folder}/all" />
		
		<!-- create the javadocs jar -->
		<jar destfile="${stage.folder}/all/${project.name}-${version.number}-javadoc.jar" filesetmanifest="skip">
			<fileset dir="${docs.folder}" />
		</jar>
		
		<!-- create the sources jar -->
		<jar destfile="${stage.folder}/all/${project.name}-${version.number}-sources.jar" filesetmanifest="skip">
			<fileset dir="${src.folder}" />
		</jar>
		
		<!-- package a complete downloadable ZIP -->
		<copy todir="${stage.folder}/all/dist" file="${releases.folder}/${project.name}-${version.number}.jar" />
		<copy todir="${stage.folder}/all/dist" file="${lib.dir}/${jython.pygments.jar}" />
		<copy todir="${stage.folder}/all" file="${root.folder}/README.md" />
		<copy todir="${stage.folder}/all" file="${root.folder}/LICENSE.txt" />
		
		<zip destfile="${releases.folder}/${project.name}-${version.number}.zip">
			<fileset dir="${stage.folder}/all" includes="**/*"/>
		</zip>
	</target>
	
	<target name="cleanStage">
		<delete dir="${stage.folder}" />
	</target>
	
	<target name="checkPygmentsJython" description="Test if the combined Jython-Pygment jar is available or not" >
		<available file="${lib.dir}/${jython.pygments.jar}" property="avail.pygments.jython" />
	</target>
	
	<target name="checkMavenAntTask" description="Test if maven ANT task jar is available or not">
		<available file="${lib.dir}/${maven.ant.jar}" property="avail.maven.ant" />
	</target>

    <target name="createPygmentsJython" description="Builds a combined Jython JAR including the Pygments library and its dependencies" 
    		unless="avail.pygments.jython" depends="checkMavenAntTask,downloadMavenAntTask" >
    	
    	<!-- defined MAVEN ANT TASKS -->
    	<path id="maven-ant-tasks.classpath" path="lib/${maven.ant.jar}" />
    	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />

    	<!-- download jython jar -->
    	<artifact:dependencies filesetId="dependency.fileset" useScope="runtime" >
    		<dependency groupId="org.python" artifactId="jython-standalone" version="${ver.jython}" />
    	</artifact:dependencies>
    	
    	<!-- create temp folder -->
    	<delete dir="${jython.stage}" />
    	<delete dir="${jython.prepare}" />
    	<mkdir dir="${jython.stage}" />
    	<mkdir dir="${jython.prepare}" />

    	<!-- copy jython files to temp dir -->
    	<copy todir="${jython.stage}">
			<fileset refid="dependency.fileset" />
			<mapper type="flatten" />
		</copy>
    	
    	<!-- extract jython to a temp dir -->
    	<unjar dest="${jython.prepare}" src="${jython.stage}/jython-standalone-${ver.jython}.jar" />
    	
    	<!-- download pygments -->
    	<get dest="${jython.stage}/${egg.pygments}" src="${pygments.download.url}" usetimestamp="true" />
    	
    	<!-- copy pygments source to temp2 -->
    	<unzip dest="${jython.prepare}/Lib" src="${jython.stage}/${egg.pygments}" />
    		
    	<!-- repackage jython runtime from temp2 -->
    	<delete file="${jython.stage}/${jython.pygments.jar}" />
    	<zip destfile="${jython.stage}/${jython.pygments.jar}" basedir="${jython.prepare}" compress="true" />
    	
    	<!-- copy new jython to lib folder -->
		<copy file="${jython.stage}/${jython.pygments.jar}" todir="${lib.dir}" overwrite="true"/>
    	
    	<!-- clean temp folders -->
    	<delete dir="${jython.prepare}" />
    </target>
    	
    <target name="downloadMavenAntTask" description="Download the Maven ANT task" unless="avail.maven.ant" >
    	<mkdir dir="${root.folder}/build/lib" />
    	<get dest="${root.folder}/build/lib/${maven.ant.jar}" src="http://www.apache.org/dist/maven/binaries/${maven.ant.jar}" usetimestamp="true" />
	</target>

</project>
